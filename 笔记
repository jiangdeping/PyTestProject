第一章：linux常见命令
wc -l:统计多少行
diff:文件进行比较
"uname -a "：可显示电脑以及操作系统的相关信息
"cat /proc/version"：说明正在运行的内核版本
"cat /etc/issue"： 显示的是发行版本信息
nohup  命令  &:后台运行命令

ps --help 查看所有命令选项及说明
显示所有的进程  ps  -A
显示指定用户的进程（这里选定root用户） ps  -u  root
显示所有的进程，包括命令行提示符信息   ps  -ef
显示所有正在内存中的进程，展示进程占用系统资源信息  ps  -aux    
ps与grep组合使用，查找匹配指定内容的进程  ps  -aux|grep  php
列出命令行相关的进程  ps  -l
树状结构展示所有的进程  ps  -axjf  
显示进程信息，并记录到指定文件中（指定文件名不存在则默认创建该文件） ps  -aux  >  log.txt

netstat：打印Linux网络系统的状态信息
注：netstat命令默认是不显示LISTEN状态的网络连接和LISTEING状态的UNIX域连接，
只有使用带-a或者-l参数的命令才能显示出来。  
-a  (all)显示所有状态的连接
-t  (tcp)仅显示tcp相关连接   
-u  (udp)仅显示udp相关连接  
-n  拒绝显示别名，能显示数字的全部转化成数字。
-l  仅列出有在监听状态的连接
-p  显示进程的pid和名字


linux三剑客：awk grep sed
管道：linux提供管道符"|"将两个命令分开，管道符左边的命令的输出作为管道符右边命令的输入

正则表达式：
标准正则：
.:匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \.
\s：匹配任意的空白符
\d：匹配数字
\b：匹配单词的开始或结束
^：匹配字符串的开始
$：匹配字符串的结束
*:匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*
扩展正则：
+:匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+
?:匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?
():标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)
{n}:重复n次   {n,}:重复n次以上  {n,m}:重复n到m次
\w：匹配字母或数字或下划线或汉字
|：表示或

grep:根据用户指定的模式对目标文本进行过滤，显示被模式匹配到的行
-v：显示不被匹配到的行
-i：忽略字符大小写
-n：显示匹配的行号
-c：统计匹配的行数
-o：仅显示匹配到的字符串
-E：使用扩展正则

sed：是流处理器，一次处理一行内容，原文件不会被改变，可加-i命令 修改原文件
语法：sed [-hnV][-e<script>][-f<script文件>][文本文件]
参数说明：
-h或--help 显示帮助。
-n或--quiet或--silent 仅显示script处理后的结果。
-V或--version 显示版本信息。
-e<script>或--expression=<script> 以选项中指定的script来处理输入的文本文件。
-f<script文件>或--file=<script文件> 以选项中指定的script文件来处理输入的文本文件。
a ：新增 sed -e '4a newline'
c ：取代 sed -e '2,5c No2-5number'
d ：删除 sed -e '2,5d'
i ：插入 sed -e '2i newline'
p ：打印 sed -n '/root/p'
s ：全局替换 sed -e 's/old/new/g'  g:全局替换 等价于sed -e 's#old#new#g'
sed -i 's/root/hello/g' test.txt 直接修改原文件内容

awk：把文件逐行读入，以空格为默认空格符将每行切片，切开的部分再进行后续的处理
常用参数：
-F(FS):域分隔符(默认是空格)
RS:记录分隔符(默认是一个换行符)
$0: 完整的输入记录 $1 代表第1条记录
NR:已读的记录数（行数）,从1开始
BEGIN:处理文本之前要执行的操作
END:处理文本之后要执行的操作

搜索/etc/passwd有root关键字的所有行，并显示对应的shell:
awk -F':' '/root/{print $7}' /etc/passwdcat

打印/etc/passwd的第二行信息：
awk 'NR==2{print $0}' /etc/passwd

使用bigin加入标题：
awk 'BEGIN{print "START"} NR==2 {print $0} END{print "ENDOVER"}' /etc/passwd

自定义分隔符：
echo "111 222|3333 4444|5555 55555"|awk 'BEGIN{RS="|"}{print $0}'

grep -E 'HTTP/1.1\"\s404' access.log.1

awk '$9~/404/' access.log.1   ~作用：$9与/404/进行匹配

#获取进程ID并kill掉
ps -aux|awk '$13~/\/gotwo_data\/Application\/task\/lib/ {cmd="kill -9 "$2;system(cmd)}'

#获取日志表中访问量最多的3个IP地址
awk '$9~/404/ {print$1}' access.log.1|sort|uniq -c|sort -nr|head -3
grep -Eo '^([0-9]+\.){3}[0-9]+' access.log.1|sort|uniq -c|sort -nr|head -3

#N:把下一行追加到此行(包含换行符)
#:1,t1代表打标记，t1跳转到标记处
awk '{print $1}' bbb.txt |sed ':1;N;s/\n/|/g;t1'



BASH编程:
变量命名规则：
只能使用英文字母、数字及下划线，首个字母不能以数字开头
中间不能有空格，可以使用下划线
不能使用标点符号
不能使用bash的关键字
变量调用：$变量名
只读变量：readonly
删除变量：unset 变量名

数组初始化： array=(a,b,c,d)
数组调用：${array[0]}
数据单个定义：array[1]=a
获取数据所有元素：${array[*]} or ${array[@]}

加减运算符：
`expr $a + $b`
`expr $a - $b`
`expr $a \* $b`
`expr $a / $b`
`expr $a % $b`

关系运算符：
-eq 相等
-ne 不相等
-gt  大于
-lt 小于
-ge 大于等于
-le 小于等于

if语句：
if 条件
   then 执行
elif 条件
   then 执行
else 执行
fi

for循环：
for var in {1..5};
do
  echo 	${var}
done

while语句：
while read line;
	do echo $line;
done <test.txt
test.txt 指向数据文件，并且该变量被作为 while 命令的重定向数据

文件参数传递:
$0是文件名
$1 是第一个参数,$2 是第二个参数,第9个变量之后,你必须在变量数字周围加上花括号，比如 ${10}
${#string} 统计string字符串个数
$# 传递到脚本的参数个数
$* 所有参数
$$脚本运行的当前进程ID
$?显示最后命令的退出状态。0表示没有错误，其他任何值表示有错误

$(date) or`date`:显示命令执行结果

read 接受用户输入，echo 命令使用了 -n 选项。该选项不会在字符串末尾输出换行符，允许脚本用户紧跟其后输入数据，而不是下一行
read 命令包含了-p选项,允许你直接在 read 命令行输入数据
read可输入多个数据
read -p "Enter :" one two three four
echo "$three,$four,$one,$two"
变量数量不够，剩下的参数就全部分配给最后一个变量
read 命令行中不指定变量，收到的任何数据都放进特殊环境变量REPLY

输出重定向：
标准输出重定向：
command >file   以覆盖的方式，把 command 的正确输出结果输出到 file 文件中
command >>file  以追加的方式，把 command 的正确输出结果输出到 file 文件中
标准错误输出重定向：
command 2>file  以覆盖的方式，把 command 的错误信息输出到 file 文件中
command 2>>file 以追加的方式，把 command 的错误信息输出到 file 文件中
正确输出和错误信息同时保存
command >file   2>&1   以覆盖的方式，把正确输出和错误信息同时保存到同一个文件（file）中
command >>file  2>&1   以追加的方式，把正确输出和错误信息同时保存到同一个文件（file）中
command >file1  2>file2  以覆盖的方式，把正确的输出结果输出到 file1 文件中，把错误信息输出到 file2 文件中。
command >>file1 2>>file2 以追加的方式，把正确的输出结果输出到 file1 文件中，把错误信息输出到 file2 文件中
输入重定向：
command <file  将 file 文件中的内容作为 command 的输入
command <<END  从标准输入（键盘）中读取数据，直到遇见分界符 END 才停止（分界符可以是任意的字符串，用户自己定义）
command <file1 >file2  将 file1 作为 command 的输入,并将 command 的处理结果输出到 file2

linux性能统计分析：安装sysstat
uptime：12:26:24 up 27 days, 18:57,  1 user,  load average: 0.25, 0.19, 0.12
平均负载：runnable，uninterruptable的均值。1,5,15分钟的均值
runnable: 可运行状态的进程（正在运行，等待运行）
uninterruptable: 不可中断的进程(等待io设备)
统计有多少用户:cat /etc/group|wc -l
深入理解负载：
cpu==1   load average==1，cpu时刻在用
cpu==4   load average==1，cpu只使用25%
平均负载不大于3，则系统表现良好
如果多核，需要累加 example：4核<12

dmesg：系统日志信息的解读

vmstat x：每隔多少s执行一次
内存管理：覆盖、交换，可用内存不足的时候使用虚拟内存
字段含义说明：
Procs（进程）
 -r 等待执行的任务数  -
 b待IO的进程数量
Memory(内存)：
 -swpd 正在使用虚拟的内存大小，单位k
 -free 空闲内存大小
 -buff 已用的buff大小，对块设备的读写进行缓冲
 -cache 已用的cache大小，文件系统的cache
 -inact 非活跃内存大小，即被标明可回收的内存，区别于free和active
 -active 活跃的内存大小
Swap
 -si 每秒从交换区写入内存的大小（单位：kb/s）
 -so 每秒从内存写到交换区的大小
IO
 -bi 每秒读取的块数（读磁盘）
 -bo 每秒写入的块数（写磁盘）
system
 -in 每秒中断数，包括时钟中断
 -cs 每秒上下文切换数
CPU（以百分比表示）
 -us 用户进程执行消耗cpu时间(user time)
 -sy 系统进程消耗cpu时间(system time)
 -Id 空闲时间(包括IO等待时间)
 -wa 等待IO时间
缓存技术：
buffer：缓冲垫，数据传输
cache：保险柜，临时存储

中断
软中断：软件引起的中断（异常）
硬中断：硬件引起的中断（I/O）

CPU:
-us：非内核进程
-sy：内核进程
-id：空闲
-wa：等待IO st

iostat
iowait：CPU闲着的时候才会等I/O

top:
-n 获取多次cpu的执行情况， top -n 4 只更新4次
-d 间隔时间 top -d 4 每隔4秒更新一次
-p 获取指定端口的进程数据 top -p 4444
linux:一切皆是文件，设备由udev进行管理，udev配置文件

curl命令及jq命令了解
---------------------------

https://www.jb51.net/article/173665.htm
多个装饰器的时候总结：
1.加载顺序：自下而上
2.执行顺序：函数调用前的:自上而下，函数调用后的:自下而上
python内置装饰器：
特性装饰器：@property　可以把一个实例方法变成其同名属性，以支持实例访问　
类方法装饰器：@classmethod  修饰的方法不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的
   cls 参数，可以来调用类的属性，类的方法，实例化对象等。
静态方法装饰器：@staticmethod 当需要一个不访问类的任何属性，但它又属于该类的实用函数时就可以用静态方法，
   它只处理传入的参数.静态方法可以直接通过类进行调用，也可以通过实例进行调用

__init__.py or __all__=[]  #指对外开放有哪些内容,  调用方式必须 from * import * 方式导入
python 3.3版本 以后不需要__init__.py 文件也可以直接调用
浮点数精度问题：Decimal("0.1")+Decimal("0.2")
导出依赖包：
pip free >requirements.txt   导出所有依赖包及其版本号
pip install -r requirements.txt  安装所有依赖包
----------------pytest------------
相关包安装：
pip install  pytest                ---pytest框架
pip install  allure-pytest         ---生成allure报告
pip install  pytest-assume         ---断言失败不会停止
pip install  pymysql               ---mysql数据库连接
pip install  pytest-rerunfailures  ---失败重跑
pip install   xlrd                 ---读取excel文件
pip install pytest-xdist           ---并行与分布式执行
pip install pytest-html            ---测试报告
pip install PyYAML                 ---yaml安装
pip install allure-pytest          ---测试allure-pytest插件
pip install pytest-ordering        ---测试用例顺序执行
===================================================
终端执行
pytest -v -s  文件名.py （-v 打印详细运行日志信息  -s带控制台输出结果）
pytest 文件名.py::类名 运行摸个模块里面的某个类
pytest 文件名.py::类名::方法名 运行某个模块里面的某个类里面的方法
pytest -m[标记名] @python.mark.[标记名] 将运行有这个标记的测试用例
pytest -x 文件名 运行到报错就停止
pytest --maxfail=[num] 当运行错误达到num的时候停止运行

pytest运行规则：
pytest 收集所有以 test_*.py(可在pytest.ini修改)开头的文件，类及函数和方法，都能识别成测试用例
常用参数
-k:满足表达式的都会执行
--collect-only 收集所有测试用例 不执行
-m 加标签，执行需要加个 -m参数，为用例@pytest.mark 标签名
-junit-xml 生产一个执行结果的xml文件

conftest.py文件:将需要共享的公共模块放在该文件，该文件放在不同的位置起着不同的范围共享作用，
不需要导入该文件，系统执行到参数时首先先从本文件中查找，然后在conftest.py中查找
改写一些方法，改写执行顺序
改写方法，自动添加标签
配置注意事项：
conftest.py文件名是不能更换的，与运行的用例放在同一package下,只对同一package里面的用例生效

pytest.ini 配置文件:改变pytest运行的行为

[pytest]
addopts=--alluredir=./result/1
python_files="abc_*py"  #文件识别规则
python_classes="Login*" #类识别规则
python_functions="case*"#方法识别规则


pytest失败重新运行：
pip install pytest-rerunfailures
pytest --reruns 3  --reruns-delay 2  -v -s 文件名.py  #--reruns 3 重新执行的次数 --reruns-delay 2 等待2s执行


断言：assert
通常一个用例我们会写多个断言，有时候我们希望第一个断言失败后，后面能继续断言，pytest-assume插件可以解决断言失败后继续断言的问题
pip install pytest-assume
pytest.assume(x == y)

pycharm 配置与执行pytest测试框架
pytest.main("-v -x TestDemo") 、pytest.main(['-v','-s','TestDemo'])等同

pytest框架结构:
pytest的setup、teardown更灵活，执行顺序：
模块级(setup_module/teardown_module)模块始末，全局的(优先更高)
函数级(setup_function/teardown_function)只对函数用例生效(不在类中)
类级(setup_class/teardown_class)只在类中前后运行一次(在类中)
方法级(setup_method/teardown_method)开始于方法始末(在类中)
类里面的(setup/teardown)运行在调用方法的前后

pytest-fixture:
有些用例需要登录，有些不需要登录。setup和teardown无法满足，fixture可以
在登录的函数面前加入@pytest.fixture,在需要登录的测试方法中传入登录函数名称

yield 生成器， 相当于:return i+暂停+并记住上一次运行位置,与fixture结合使用，激活yield后面的操作
yield：通过在方法中加入yield关键字，yield之前的第一次调用该方法时执行，yield之前的后在最后一次调用该方法时执行
@pytest.fixture(scope=module)
scope:session 作用域、function 方法 、class 类 、module 模块、package包
执行顺序：session>module>function,如果有antouse=True,优先于同等级


fixture的自动化应用：
在方法上加 @pytest.fixture(autouse=True)，每一条测试用例都加上该方法
在测试方法上加 @pytest.mark.usefixtures("start")

fixture带参数传递
@pytest.fixture(params=[1,2,3,'linda']),在方法参数前写request



mark中的skip与xfail
skip：不想运行某些测试用例，skipif 满足条件的不运行该用例
xfail：标记用例预期失败，如果用例运行成功则显示Xpassed，失败则显示xfailed。
xfail标记并不会影响用例的运行。设置strict=True以确保XPASS时，测试的记录为失败

pytest并行与分布式执行：
pytest  文件名.py -n number

pytest-html:生成报告
pytest -v -s --html=report.html--self-contained-html

pytest数据参数化
@pytest.mark.parametrize(argnames,argvalues)  argnames,argvalues一一对应
argnames:要参数化的变量,string,list,tuple
argvalues:参数化的值,list,list[tuple]

yaml实现list
pip install PyYAML
yaml.safe_load(open("文件名.yaml"))

数据驱动：app、web、接口自动化测试
测试步骤的数据驱动、测试数据的数据驱动、配置的数据驱动

allure:
安装：
1.安装jdk1.8+(百度网盘)
2.安装Allure(百度网盘)
  解压并进入bin目录,运行allure.bat，将bin路径添加allure到环境变量PATH
3.安装allure—pytest插件
步骤：
1.测试执行期间收集执行结果
pytest 文件名.py  --alluredir=./result/1 (--alluredir 指定存储测试结果的路径)
2.生成测试报告
 方法1：测试完成后查看实际报告 allure serve ./result/5
 方法2：从结果生成报告
      生成报告：allure generate ./result/ -O ./report --clean(覆盖路径加--clean)
      查看报告：allure open -h 127.0.0.1 -p 8883 ./report/

常用特性
@allure.feature("功能名称")
@allure.story("子功能名称")
with.allure.step("步骤细节")
@allure.attach("具体文本信息"，需要附近的信息可以是数据、文本、图片、视频、网页)
只运行部分功能：pytest 文件名  --allure_features "功能名称"  --allure_stories "子功能名称"

按重要级别进行的范围测试
1.附加pytest.mark标记
2.allure.feature,allure.story
3.allure.severity附加标记   级别：Trivial不重要、Minor不太重要、Normal正常、Critical严重、Blocker阻塞
步骤：
在方法、函数和类前面加：@allure.severity(allure.severity_level.级别)
执行时：pytest -s -v 文件名 --allure-severities 级别(可多个用’,‘分割)

驱动:
测试数据的驱动
测试步骤的驱动



---------------selenium----------------
chromedriver下载地址：http://npm.taobao.org/mirrors/chromedriver
webdriver
IDE：录制
Grid：分布式

隐示等待：implicitly_wait   #放入setup方法中
显示等待：WebDriverWait(self.driver,10).until(expected_conditions.element_to_be_clickable(())) #查找元素使用


xpath：xml路径语言，用于xml的节点定位
XPATH:Path Language(速度比较慢)
/从根节点选取   //从匹配选择的当前节点选择文档中的节点，不考虑他们的位置
. 选择当前节点   ..选择当前节点的父节点  @选取属性
/bookstore/book[1]      选取属于bookstore子元素的第一个book元素
/bookstore/book[last()]  选取属于bookstore子元素的最后一个book元素
/bookstore/book[last()-1] 选取属于bookstore子元素的倒数第二book元素
/bookstore/book[position()<3]  选取最前面的2个属于bookstore元素的子元素的book元素
//title[@lang]  选取所有拥有名为lang属性的title元素
//title[@lang="eng"]  选取所有title元素，这些元素拥有值为eng的lang属性
/bookstore/book[price>10] 选取bookstore的所有book元素，且price>10
/bookstore/book[price>10]/title 选取bookstore的所有book元素的所有title元素，且price>10
选取未知节点：
* 匹配任何元素节点
@*匹配任何属性节点
node[]匹配任何类型的节点
/bookstore/* 选取bookstore元素的子元素
//*选取文档中的所有元素
//title[@*]选取所有带有属性title的元素


CSS Selector定位:
浏览器操作：$('#su')
# 表示id
. 表示class
> 表示子元素，层级


ActionChains：执行PC端的鼠标点击、双击、右键、拖拽等事件
TouchActions：模拟PC和移动端的点击、滑动、拖拽、多点触控等多种手势操作
当用户调用ActionChains方法执行动作时，这些动作会被存储到一个ActionChains对象的队列中，此时并不会真
正执行这些动作。而当调用perform()时，ActionChains对象中动作队列会被一一执行
action.drag_and_drop(drag_element,drop_element).perform() #拖拽方法1
action.click_and_hold(drag_element).release(drop_element).perform()#拖拽方法2


selenium 如何处理多窗口：
点击某些链接，会重新打开一个窗口，对于这种情况，想在新页面操作就需要切换窗口了
获取窗口唯一标识用句柄表示，所以只需要切换句柄，就可以在多个页面灵活操作
获取当前窗口的句柄：driver.current_window_handle
获取到所有的窗口句柄：driver.window_handles
切换窗口：switch_to_window

frame：一个元素定位不到，很大可能该元素不再iframe中
frame分类：frameset、frame、iframe
driver.switch_to.frame()：根据元素ID或index切换frame
driver.switch_to.default_content() 切换到默认frame
driver.switch_to.parent_frame 切换到父级frame
对于签到的iframe：先切换到父节点在切换到子节点

selenium执行javascript脚本，解决:
1.直接使用JS操作页面，解决很多click()不生效的问题
2.页面滚动到底部，顶部
3.处理富文本，时间控件输入等
execute_script：执行js
return:返回js的返回结果
execute_script：arguments传参
JS处理时间控件思路：
1.取消日期的readonly属性 :
a=document.getElementById("train_date")
a.removeAttribute('readonly')
2.给value赋值
3.写js代码实现如上2点，在用webdriver对js进行处理

selenium文件上传：input标签可以直接使用send_keys(文件地址)上传文件

弹框处理机制：
在页面操作中会遇到JavaScript生产的alert、confirm及prompt弹框，可以使用switch_to.alert()方法定位。
然后使用text/accept/dismiss/send_keys等方法进行操作
操作alert常用方法：
switch_to.alert():获取当前页面的警告框
text:返回alert、confirm及prompt中的文字信息
accept():接受现有警告框
dismiss():解散现有警告框
send_keys(keysToSend):发送文件警告框。keysToSend：将文本发送至警告框
#snipaste  截图工具

page Objects 六大原则：
1.公共方法表示页面提供的服务
2.不要暴露页面的细节
3.Page设计中不要出现断言，应该写在测试用例类中
4.方法应该返回其他的Page对象
5.不要去代表整个page，如果一个页面中有很多功能，只需要对重点功能封装方法即可
6.不同的结果返回不同的方法，不同的模式

selenium复用浏览器
1.chrome浏览器放入环境变量
2.在命令下执行:chrome --remote-debugging-port=9222
3.options=Options()
  options.debugger_address="127.0.0.1:9222"
  driver=webdriver.Chrome(options=options)


元素的常用方法  （appium selenium均可用）
是否可见 is_displayed()
是否可用 is_enalberd()
是否被选择 is_selected()
获取属性 get_attribute()
清除 clear
设置元素值 ser_value()
元素常用的属性： （appium selenium均可用）
元素文本 text
元素坐标 locationg
元素尺寸 size
------------------appium-----------------
appnium设计原理
客户端：python3,appnium-python-client
服务端：
方法一：appium-desktop：appium inspector 录制功能和appium server
方法二：appium server
 node js>=10,建议12.*版本，npm>=6
 npm install -g cnpm --registry==https://registry.npm.taobao.org
 cnpm install -g appium
3.手机端（被测设备）：
 Android 设备，可以在运行在window、MacOS、Linux环境
 ios 设备：必须在MacOS系统
 模拟器

appium安装环境搭建：https://www.cnblogs.com/fnng/p/4540731.htmlhttps://www.cnblogs.com/fnng/p/4540731.html
1.JDK 1.8及以上版本安装
2.SDK安装及环境变量配置 ：http://tools.android-studio.org/index.php/sdk
   ANDROID_HOME D:\android-sdk-windows
   PATH  %ANDROID_HOME%\tools;%ANDROID_HOME%\platform-tools
   查看安装成功  adb
3.appium环境安装及客户端安装：
  方法一：下载安装包安装：https://github.com/appium/appium-desktop/releases
  方法二：npm安装:   需要先装 node.js   node js>=10,建议12.*版本，npm>=6
     npm install -g cnpm --registry==https://registry.npm.taobao.org
     cnpm install -g appium
4.安装appnium-client：pip install appium-python-client
5.安装appium-doctor:npm install appium-doctor  查看appium安装信息
6.安装网易mumu模拟器：https://mumu.163.com/
 无法连接网易mumu：D:\MuMu\emulator\nemu\vmonitor\bin下执行：adb connect 127.0.0.1:7555
 使用教程：https://www.pianshen.com/article/27411242829/
 真机：1.打开调试模式 2.安装驱动程序（如豌豆荚）


adb命令安装应用：https://developer.android.google.cn/studio/command-line/adb
https://yinleilei.blog.csdn.net/article/details/87897863?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link
 adb install 名称.apk  -r 覆盖安装 -s 选择安装设备
adb组件：adb client、adb server、adbd
adb client：用户发送命令。在开发计算机上运行，通过发送adb命令从命令行终端调用客户端
adb server：管理客户端与守护进程之间的通信。服务器在开发机器上作为后台进程运行
adbd(守护进程)：在设备上运行命令，在每个设备上作为后台进程运行
appium -p 端口号：命令启用appium服务
 常用端口分析：
 4723：appium提供的默认端口号,接受客户端发来请求
 5037：adb server 与adb client通讯的端口
 7555：mumu模拟器的端口

Capability设置：
 "platformName": "android",
  "deviceName": "127.0.0.1:7555",
  "appPackage": "com.xueqiu.android",
  "appActivity": ".view.WelcomeActivityAlias",
  "noReset": True #测试前后是否重置相关测试环境
  "unicodeKeyboard":False  #启用 Unicode 输入，默认 false
  "resetKeyboard":True 键盘重置为其原始状态 true 或者 false

Capability进阶：
newCommandTimeout: 隐式等待超时时间，默认是60s
udid：设备的唯一标识，未设置udid时默认取devices列表的第一个设备
autoGrantPermissions：授予弹框的权限，自动点击确认。默认false
noRest：测试前后是否重置相关测试环境 noreset=true
fullRest：清空数据并卸载app，使app保持干净环境
dontStopAppOnRest：首次启动的时候，不停止app（可以调试或者运行的时候提升运行速度）
skipDeviceInitialization  跳过安装，权限设置等操作（可以调试或者运行的时候提升运行速度）
appium 设置时间waitForIdleTimeout


Android七大布局：
线性布局：LinearLayout
相对布局:RelativeLayout
帧布局：FrameLayout
绝对布局:AbsoluteLayout
表布局:TableLayout
网格布局：GridLayout
约束布局：ConstrainLayout

四大组件：
activity：与用户交互的可视化的界面
service：实现程序后台运行的解决方案
content provider：内容提供者，提供程序所需要的数据
broadcast receiver：广播接收器,监听外部事件的到来

常用控件：
TextView:文本控件    EditText：可编辑文本控件
Button：按钮  ImageButton：图片按钮  ToggleButton：开关按钮
imageView：图片控件
Checkbox：复选框控件   RadioButton：单选框控件

测试步骤三要素：定位、交互、断言
定位方式：id(优先级最高),accessibility_id(其次),xpath(速度慢定位灵活)、uiautomator定位(速度快语法复杂)
id:resource-id
accessibility_id:content-desc

uiautomator定位：
基本语法：driver.find_element_by_android_uiautomator(xx)
1.通过text文本定位语法:
    new UiSelector().text("text文本")
2.如果文本比较长，可以用textContains模糊匹配:
    new UiSelector().textContains("包含text文本")
3.textStartsWith是以某个文本开头来匹配:
    new UiSelector().textStartsWith("以text文本开头")
4.正则表达式textMatches匹配：
    new UiSelector().textMatches("正则表达式")
5.resourceId定位：new UiSelector().resourceId("id")
6.className定位：new UiSelector().className("className")
7.description定位：new UiSelector().description("contenet-des属性")
8.组合定位：
  id与text属性组合：'new UiSelector().resourceId("com.baidu.yuedu:id/webbooktitle").text("小说")'
  class与text属性组合：'new UiSelector().className("android.widget.TextView").text("图书")'
9.关系定位：
 父子定位childSelector：'new UiSelector().resourceId("com.baidu.yuedu:id/rl_tabs").childSelector(text("小说"))'
 兄弟定位fromParent： 'new UiSelector().resourceId("com.baidu.yuedu:id/lefttitle").fromParent(text("图书"))'
10.滚动查找元素定位：new UiScrollable(new UiSelector().scrollable(true).instance(0)).
scrollIntoView(new UiSelector().text("李一恩的投资组合").instance(0))

uiautomatoreviewer工具(only andriod)

TouchAction：
press:按下
release：释放
moveTo:移动
tap：点
wait：等待
longpress：长按
cancel：取消
perform：执行
MultiTouch: 多点触摸

等待：
隐示等待：implicitly_wait   #放入setup方法中
显示等待：处理隐示等待无法解决的一些问题
WebDriverWait(self.driver,10).until(expected_conditions.element_to_be_clickable(locator)) #查找元素使用

toast控件识别：简易的消息提示框
必须使用xpath查找 ：
//*[@class='andriod.widget.Toast']
//*[@contains(@text,'xxxx')]

断言：
普通断言：assert
Hamcrest断言：

app参数化用例:与pytest一致

WebView
域套接字：进程与进程之前的一种方式
客户端与服务器建立连接，需要有共同的套接字和相应的服务器端口
套接字会处于监控状态，监听客户端发来的请求
获取webview的进程
adb shell cat /proc/net/unix grep "webview"

被测试的页面是动态的，页面一直处于不断刷新状态，Appium Server 认为这个页面还没有加载完，
不会去发送指令到手机端，它会等待页面完全加载完成，再发送命令，这个等待的时长默认是 10s appium会一直等待，
直到10S结束，才开始进行指令的发送。
caps['settings[waitForIdleTimeout]'] = 0

skipUnlock：会话创建期，跳过解锁
skipLogcatCapture：与日志相关的命令将不起作用。默认为false.

测试框架设计思想：
1.pageObject设计模式对UI及测试进行封装
2.PO改进：数据驱动、异常处理等
  2.1测试数据的数据驱动:对部分数据进行参数化、把参数化的数据放入yaml/json等文件
     提高数据的维护性、让数据变得规范、可对数据备份
     配置的数据驱动：抽离公共数据，数据存入yaml中
  2.2数据步骤的数据驱动:对测试步骤进行封装、利用yaml编写测试用例
     提高测试代码的编写效率、异常排查效率高、代码可维护性高
  2.3自动化异常处理机制
     弹窗问题：弹窗请求、弹窗广告、弹框好评
     阻碍测试用例的正常运行、测试用例卡在弹框页面
     解决思路：利用try catch捕获异常、异常处理弹框
3.Pytest单元测试

元编程：
不要重复自己的工作:创建函数、创建类
实现元编程方法：装饰器，类装饰器，元类



scrcpy录像
下载地址：https://github.com/Genymobile/scrcpy/releases

monkey：https://developer.android.com/studio/test/monkey
基本配置选项：设置操作数量
操作约束:对指定app进行测试
事件类型和频率
调试选项
adb shell monkey 100 对所有包随机操作次数
adb shell monkey -p com.xueqiu.android 100 对指定包
adb shell monkey -p com.xueqiu.android -s 20 80 时间种子
adb shell monkey -p com.xueqiu.android -vv -s 20 80 详细日志（-v：1级日志 -vv：2级日志）
adb shell monkey -p com.xueqiu.android --throttle 500 100 时间间隔（多少时间执行一次）
adb shell monkey -p com.xueqiu.android  --pct-touch 80 100 事件百分比
--pct-touch：触摸事件，比如点击
--pct-motion：动作事件 比如滑动、直线
--pct-trackball：轨迹事件，比如移动+点击
--pct-majornav:主要导航事件，比如回退按键、菜单按键
--pct-nav：导航事件（点击设备的上下左右按键）
多设备运行monkey：
#/bin/bash
devices=`adb devices|grep 'device\>'|awk '{print $1}'`
for device in $devices
        do
        echo $device
        #nohup  command  * 后台运行
        { nohup adb -s $device shell monkey -p com.xueqiu.android --pct-touch 30 --pct-motion 20 --pct-trackball 30 --pct-majornav 20 -v --throttle 50 100 &}
        done


maxim:Android Mokney进行改进，基于遍历规则、高性能
下载地址：https://github.com/zhangzhao4444/Maxim

appcrawer：自动化遍历工具
下载地址：https://github.com/seveniruby/AppCrawler
执行命令：java -jar appcrawler-2.4.0-jar-with-dependencies.jar
生成demo文件：java -jar appcrawler-2.4.0-jar-with-dependencies.jar --demo
运行demo文件：java -jar  appcrawler-2.4.0-jar-with-dependencies.jar  -c demo2.yml
动作支持action：
    back 后退
    backApp 回退到当前app默认
    monkey 随机事件
    xxx()执行代码：Thread.sleep(30)/driver.swipe(0.9,0.5,0.1,0.5)
    click
    longTap
triggerActions:触发器
    需要特定次数的触发动作
    通常用于处理弹框：
    xpath：指定具体按钮
    action：动作
    times：规则的使用次数

遍历流程
    1.信息的获取：把当前app的界面dump为xml结构
    2.获取待遍历元素：
    >遍历范围：selectedList
    >过滤黑名单 小控件 不可见控件：blackList
    >重排控件顺序 firstList lastList
    >跳过已点击+跳过限制点击的控件 tagLimit
    >根据匹配的规则执行action
    3.循环上面的步骤


OpenSTF:https://github.com/openstf/stf 对手机远程管理

基于jenkins的自动化调度详解：

selenium Grid:主旨多个机器运行,appium支持Selenium Grid
selenium grid下载地址：https://www.selenium.dev/downloads
appium node结点配置：http://appium.io/docs/en/advanced-concepts/grid
工作流程：
1.启动selenium hub:切换到jar所在目录执行
 java -jar selenium-server-standalone-3.141.59.jar -role hub

2.启动appium server node结点命令：
appium -p 4723 --nodeconfig  xxx.json
appium -p 4724 --nodeconfig  xxx.json

3.appium node结点配置：
{
  "capabilities":
      [
        {
          "browserName": "ANDROID",
          "devicesName":"77c1ca380903",
          "version":"6.0",
          "maxInstances": 1,
          "platform":"ANDROID"
        }
      ],
  "configuration":
  {
    "cleanUpCycle":2000,
    "timeout":30000,
    "proxy": "org.openqa.grid.selenium.proxy.DefaultRemoteProxy",
    "url":"http://192.168.1.189:4723/wd/hub",
    "host": "192.168.1.189",
    "port": 4723,
    "maxSession": 1,
    "register": true,
    "registerCycle": 5000,
    "hubPort": 4444,
    "hubHost": "192.168.1.189",
    "hubProtocol": "http"
  }
}

-------------------------
接口测试
TCP/IP:应用层、传输层、网络层、网络接口层
应用层：DNS：域名解析、TELNET:远程终端协议、HTTP：超文本传输协议、FTP:文件传输协议、SMTP:发邮件协议、POP3:收邮件协议
传输层：TCP/UDP
网络层：IP、ARP、RARP、ICMP、IGMP
网络接口层：各种通信网络接口(以太网等) 物理网络
TCP:面向连接、错误重传、拥塞控制，适用于可靠性高的场景
UDP：不需要提前建立连接、实现简单、适用于实时性高的场景
抓包工具：

restful构架：
1.每一个URL代表一种资源
2.客户端和服务器之前，传递这种资源的某种表现
3.客户端通过四个HTTP动词，对服务器资源进行操作，实现表现层状态转化
四个动作：
post：新增或更新资源
get:获取资源
put：更新资源
delete：删除资源
requests文档api：
https://docs.python-requests.org/zh_CN/latest/user/quickstart.html


jmeter：dos窗口运行
找到jmeter的脚本位置，设置好聚合报告（jtl文件，可用jmeter打开）需要放置的位置，执行命令：
jmeter -n -t E:\apache-jmeter-3.0\demo\src.jmx -l E:\log.jtl
-n是无GI方式启动；-t 指的是jmmeter脚本的文件；-l 输出聚合报告

JMETER分布式控制：
工作节点部署：
负载机：
jmeter.properties:关闭ssl  server.rmi.ssl.disalbe=true
system.properties java.rmi.server.hostname=负载机IP地址
运行jmeter-server
控制节点服务器部署：
jmeter.properties
添加负载机IP:remote_hosts=节点服务器IP1, 节点服务器IP2
关闭ssl：server.rmi.ssl.disalbe=true

工具栏启动：运行-远程启动所有或远程启动单个
分布式命令启动：jmeter -n -t E:\apache-jmeter-3.0\demo\src.jmx -l E:\log.jtl -R 节点服务器IP1, 节点服务器IP2




























emulator：ERROR：This AVD's configuration is missing a kernel file! 解决方法：
原因是kernal file的名称不正确。
找到.android\avd\你的虚拟设备.avd下的config.ini。
查找image.sysdir.1属性。
我的值是system-images\android-28\google_apis_playstore\x86\。
system-images在sdk目录下。
然后顺着image.sysdir.1的路径，看看该路径下有没有对应的kernel-qemu。
如果没有把kernel-ranchu-64改成该文件名。


emulator: ERROR: x86 emulation currently requires hardware acceleration!
Please ensure Intel HAXM is properly installed and usable.
CPU acceleration status: HAX kernel module is not installed!
安装D:\android-sdk-windows\extras\intel\Hardware_Accelerated_Execution_Manager下的intelhaxm-android.exe文件

MYSQL：
1.下载安装：https://dev.mysql.com/downloads/file/?id=507824
2.下载的文件解压并新建data目录夹及my.ini文件
3.环境变量配置
  新建系统变量：MYSQL_HOME=D:\mysql-8.0.27-winx64
  新建环境变量：%MYSQL_HOME%\bin
4.CMD窗口跳转到安装路径D:\mysql-8.0.27-winx64\bin目录,执行初始化命令
  mysqld --initialize --user=mysql --console
5.将MYSQL添加到服务：mysqld -install
6.启动服务：net start  MySQL(可在服务和应用程序查看启动的mysql名)
7.登录mysql：mysql -u root -p  tKix?Zhu4Y;R
8.修改初始密码：ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456';
创建表：
CREATE TABLE `user` (
  `id` int unsigned NOT NULL AUTO_INCREMENT COMMENT 'ID',
  #unsigned 禁用负值
  `NAME` varchar(100) DEFAULT NULL COMMENT '名称',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT='用户表';
约束：
（1）NOT NULL：字段中不允许出现NULL
（2）UNIQUE：唯一标识数据库表中的每条记录，也就是约束该字段中没有重复的项，一个表中可以有多个UNIQUE约束
（3）PRIMARY KEY：设置该字段为主键，一个表中只能有一个主键
（4）FOREIGN KEY：一个表中的 FOREIGN KEY 是指向另一个表中的 PRIMARY KEY的
（5）CHECK：限制该字段中的值的范围，如CHECK (id>0)
（6）DEFAULT ：向字段中添加默认值
（7）ENGINE： 设置存储引擎，不写则默认为InnoDB
（8）CHARSET ：设置编码格式，默认为utf8
（9）COMMENT 注释说明
关键名字解释：
主键：唯一标识符,不重复,非空,隐示索引,用来保证数据完整性.只能有一个
联合主键：两个字段组合确定数据的唯一性,
外键：来自于其他表的主键,可以重复的, 可以为空值，用来和其他表建立联系用的，一个表可以有多个外键
索引：没有重复值,但可以有一个空值,提高查询排序的速度，一个表可以有多个唯一索引
注意事项：
（1）字段名和表名不要用加引号
（2）varchar要在括号内写明其字符最大长度
（3）约束可以写在数据类型后面以空格隔开，也可以定义完字段后写在后面以逗号隔开
explain：对sql进行分析，加载sql前面
修改表结构：
alter table 表名 修改选项
修改选项语法：
	add column 列名 类型  //添加字段
	change column 旧列名 新列名 新列类型 //修改字段名
	modify column 列名 类型 //修改字段类型
	drop column 列名 //删除字段
	rename to 新表名//修改表名
<> !=  不等于
like语法：
	'%a'     //以a结尾的数据
	'a%'     //以a开头的数据
	'%a%'    //含有a的数据
	'_a_'    //三位且中间字母是a的
	'_a'     //两位且结尾字母是a的
	'a_'     //两位且开头字母是a的
删除数据:
delete 单条删除 是 DML 语句，不想提交事务可以回滚
truncate 清除表数据 drop 清除表数据和结构，truncate和drop是DDL语句，操作完立马生效不可回滚
UNION语法：
UNION 语句：用于将不同表中相同列中查询的数据展示出来；（不包括重复数据）
SELECT 列名称 FROM 表名称 UNION SELECT 列名称 FROM 表名称 ORDER BY 列名称；
UNION ALL 语句：用于将不同表中相同列中查询的数据展示出来；（包括重复数据）
SELECT 列名称 FROM 表名称 UNION ALL SELECT 列名称 FROM 表名称 ORDER BY 列名称；
join语法：
INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录
LEFT JOIN(左连接):获取左表所有记录，即使右表没有对应匹配的记录
RIGHT JOIN(右连接):用于获取右表所有记录，即使左表没有对应匹配的记录
NULL:列表的值为NULL时 用is NULL进行判断，值为空时不应用NULL进行判断
正则表达式：MYSQL也可以匹配正则表达式，where+字段名 +REGEXP+正则表达式
内置函数：
删除空格：TRIM  LTRIM RTRIM
返回字符串左边或右边的字符：LEFT/RIGHT(STR,LEN)
反序：REVERSES
从某个位置截取长度为冷的字符串：SUBATR(STR,START,LEN)
常用函数：
ADDDATE(d,n)：d在n天后的日期
CURRENT_DATE()/CURRENT_TIME():返回当前日期/时间
CURRENT_TIMESTAMP()/NOW():返回当前日期和时间
DATEDIFF(d1,d2):计算日期d1,d2相隔天数

DDL（Data Definition Languages）语句：即数据库定义语句，用来创建数据库中的表、索引、视图、存储过程、触发器等，常用的语句关键字有：CREATE,ALTER,DROP,TRUNCATE,COMMENT,RENAME。
DML（Data Manipulation Language）语句：即数据操纵语句，用来查询、添加、更新、删除等，常用的语句关键字有：SELECT,INSERT,UPDATE,DELETE,MERGE,CALL,EXPLAIN PLAN,LOCK TABLE,包括通用性的增删改查。
DCL（Data Control Language）语句：即数据控制语句，用于授权/撤销数据库及其字段的权限。常用的语句关键字有：GRANT,REVOKE。
TCL（Transaction Control Language）语句：事务控制语句，用于控制事务，常用的语句关键字有：COMMIT,ROLLBACK,SAVEPOINT,SET TRANSACTIO

事务特性：
原子性：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节
一致性：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到
隔离性：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。
持久性：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚
MYSQL 事务处理主要有两种方法（DML语句）：
1、用 BEGIN, ROLLBACK, COMMIT来实现
	BEGIN 开始一个事务
	ROLLBACK 事务回滚
	COMMIT 事务确认
2、直接用 SET 来改变 MySQL 的自动提交模式:
	SET AUTOCOMMIT=0 禁止自动提交
	SET AUTOCOMMIT=1 开启自动提交

数据结构比对、数据比对：可使用navicat-工具：结构同步、数据同步，只是对库级别进行操作
结构同步：只是对表结构进行同步（新增表、删除表、修改表），不同步数据

导入示范数据库：
1.将解压文件移至到bin目录
2.cmd命令切换到bin目录 source employees.sql即可

存储过程：制造数据
	drop PROCEDURE if EXISTS testPROCEDURE;
	delimiter $$
	CREATE PROCEDURE testPROCEDURE()
	BEGIN
		DECLARE i int;
		set i=101;
		while(i<=300) DO
		INSERT into user VALUES(i,concat("张三",i),concat('测试部门',i));
		SET i=i+1;
		end WHILE;
	end $$
	delimiter ;
	call testPROCEDURE() 调用存储过程
mysql log查看日志